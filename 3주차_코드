package com.example.hglas;
 
import androidx.appcompat.app.AppCompatActivity;
 
import android.content.Intent;
import android.media.MediaPlayer;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Vibrator;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import java.io.IOException; 
import de.re.easymodbus.exceptions.ModbusException;
import de.re.easymodbus.modbusclient.*;
 
public class LoginActivity extends AppCompatActivity {
    private int[] value = new int[100];
    private int[] gas = new int[16];
    private boolean[] flag = new boolean[16];
    private String[] gas_s = new String[16];
    private TextView[] tv = new TextView[16];
    private TextView current;
    private ModbusClient modbusClient;
    private stop_solution s;
    private reset_solution r;
    private detail_solution d;
    private Button details, stop, reset;
    private String current_s;
    private MediaPlayer mediaPlayer;
    private Vibrator vibe;
 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
 
        modbusClient = new ModbusClient("192.168.0.121", 5000);
        vibe = (Vibrator) getSystemService(VIBRATOR_SERVICE);
        mediaPlayer = MediaPlayer.create(this, R.raw.merge_siren_10);
        MyAsynctask m = new MyAsynctask(modbusClient);
        m.execute();
 
        // 자세히 버튼을 눌렀을 때의 내용
    }
 
    public void onClick(View v){
        if(v.getId() == R.id.stop){
            s = new stop_solution();
            s.run();
        }else if(v.getId() == R.id.reset){
            r = new reset_solution();
            r.run();
        }else if(v.getId() == R.id.details){
            d = new detail_solution();
            d.run();
        }
    }
 
    class MyAsynctask extends AsyncTask<String, String, Boolean> {
        ModbusClient modbusClient;
 
        public MyAsynctask(ModbusClient client) {
            this.modbusClient = client;
        }
 
        // 초기화 작업
        @Override
        protected void onPreExecute() {
            tv[0] = findViewById(R.id.gas_0101);
            tv[1] = findViewById(R.id.gas_0102);
            tv[2] = findViewById(R.id.gas_0103);
            tv[3] = findViewById(R.id.gas_0104);
            tv[4] = findViewById(R.id.gas_0105);
            tv[5] = findViewById(R.id.gas_0106);
            tv[6] = findViewById(R.id.gas_0107);
            tv[7] = findViewById(R.id.gas_0108);
            tv[8] = findViewById(R.id.gas_0109);
            tv[9] = findViewById(R.id.gas_0110);
            tv[10] = findViewById(R.id.gas_0111);
            tv[11] = findViewById(R.id.gas_0112);
            tv[12] = findViewById(R.id.gas_0113);
            tv[13] = findViewById(R.id.gas_0114);
            tv[14] = findViewById(R.id.gas_0115);
            tv[15] = findViewById(R.id.gas_0116);
            details = findViewById(R.id.details);
            stop = findViewById(R.id.stop);
            reset = findViewById(R.id.reset);
            current = findViewById(R.id.current);
            current.setText("총 16개소 정상 작동 중");
        }
 
        // 백그라운드 작업 내용
        @Override
        protected Boolean doInBackground(String... strings) {
            while(true) {
                try {
                    modbusClient.Connect();
                    for (int i = 3; i < 35; i++)
                        value[i] = modbusClient.ReadHoldingRegisters(40000, 64)[i];
                    for (int i = 0; i < 64; i++)
                        value[35 + i] = modbusClient.ReadHoldingRegisters(40035, 64)[i];
 
                    for (int i = 0; i < 16; i++) {
                        gas[i] = value[3 + (6 * i)];
                        gas_s[i] = Integer.toString(gas[i]);
                        if (gas[i] > 20) {
                            flag[i] = true;
                            current_s = (i + 1) + "/";
                        }
                        publishProgress(gas_s[i]);
                    }
                    Thread.sleep(100);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
 
        // 백그라운드 실행하면서 주기적으로 업데이트할 내용
        @Override
        protected void onProgressUpdate(String... values) {
 
            for (int i = 0; i < 16; i++)    // 가스량 표시
                tv[i].setText(gas_s[i]);
 
            for (int i = 0; i < 16; i++) {    // flag 값이 true 인 항목이 하나라도 있는지 확인하는 작업
                if (flag[i] == true) {
                    current.setText("현재 " + current_s + "개소 누출 중");
                    details.setVisibility(View.VISIBLE);
                    stop.setEnabled(true);
                    reset.setEnabled(true);
                    vibe.vibrate(3000);
                    mediaPlayer.start();
                    break;
                } else {
                    current.setText("총 16개소 정상 작동 중");
                }
            }
        }
 
        // execute() 함수 실행 후의 내용
        @Override
        protected void onPostExecute(Boolean s) {
            super.onPostExecute(s);
            Log.d("end : ", "완료");
        }
 
        // 취소되었을 때의 동작 내용
        @Override
        protected void onCancelled(Boolean s) {
            super.onCancelled(s);
            Log.d("cancelled : ", "취소");
        }
    }
 
    class stop_solution implements Runnable {
        @Override
        public void run() {
            try {
                for (int i = 0; i < flag.length; i++) {
                    modbusClient.WriteSingleRegister(39995 - (6 * (15 - i)), 1);
                    flag[i] = false;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            Toast.makeText(getApplicationContext(), "일시정지 되었습니다.", Toast.LENGTH_SHORT).show();
        }
    }
 
    class reset_solution implements Runnable {
        @Override
        public void run() {
            try {
                for (int i = 0; i < flag.length; i++) {
                    modbusClient.WriteSingleRegister(39995 - (6 * (15 - i)), 2);
                    flag[i] = false;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            Toast.makeText(getApplicationContext(), "리셋되었습니다.", Toast.LENGTH_SHORT).show();
        }
    }
 
    class detail_solution implements Runnable{
        @Override
        public void run(){
            /*Intent d = new Intent(LoginActivity.this, DetailActivity.class);
            d.putExtra("error", current_s);
            mediaPlayer.stop();
            mediaPlayer.release();
            startActivity(d);*/
            try {
                modbusClient.WriteSingleRegister(39995, 100);
            } catch (ModbusException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
